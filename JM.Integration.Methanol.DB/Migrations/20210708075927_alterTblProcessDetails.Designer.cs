// <auto-generated />
using System;
using JM.Integration.Methanol.DB.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JM.Integration.Methanol.DB.Migrations
{
    [DbContext(typeof(LevoMethanolDBContext))]
    [Migration("20210708075927_alterTblProcessDetails")]
    partial class alterTblProcessDetails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.Converter", b =>
                {
                    b.Property<string>("ConverterSid")
                        .HasColumnName("Converter_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CatalystExpChgDate")
                        .HasColumnName("Catalyst_exp_chg_date")
                        .HasColumnType("date");

                    b.Property<string>("CatalystName")
                        .HasColumnName("Catalyst_name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CatalystStartDate")
                        .HasColumnName("Catalyst_start date")
                        .HasColumnType("date");

                    b.Property<string>("CatalystSupplier")
                        .HasColumnName("Catalyst_supplier")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("CatalystVolume")
                        .HasColumnName("Catalyst_volume")
                        .HasColumnType("float");

                    b.Property<string>("CatalystVolumeUnit")
                        .HasColumnName("Catalyst_volume_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ConverterName")
                        .HasColumnName("Converter_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ConverterStatus")
                        .HasColumnName("Converter_Status")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfEstablish")
                        .HasColumnName("Date_of_establish")
                        .HasColumnType("date");

                    b.Property<double?>("ReactorAetType")
                        .HasColumnName("Reactor_AET_type")
                        .HasColumnType("float");

                    b.Property<string>("ReactorAetTypeUnit")
                        .HasColumnName("Reactor_AET_type_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ReactorDuty")
                        .HasColumnName("Reactor_duty")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("ReactorRefFlowRate")
                        .HasColumnName("Reactor_Ref_flow_rate")
                        .HasColumnType("float");

                    b.Property<string>("ReactorRefFlowRateUnit")
                        .HasColumnName("Reactor_Ref_flow_rate_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("ReactorSafeAetTemp")
                        .HasColumnName("Reactor_safe_AET_Temp")
                        .HasColumnType("float");

                    b.Property<string>("ReactorSafeAetTempUnit")
                        .HasColumnName("Reactor_safe_AET_Temp_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("ReactorSafeMaxTemp")
                        .HasColumnName("Reactor_Safe_max_temp")
                        .HasColumnType("float");

                    b.Property<string>("ReactorSafeMaxTempUnit")
                        .HasColumnName("Reactor_Safe_max_temp_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("ReactorTrgtMaxTemp")
                        .HasColumnName("Reactor_Trgt_max_temp")
                        .HasColumnType("float");

                    b.Property<string>("ReactorTrgtMaxTempUnit")
                        .HasColumnName("Reactor_Trgt_max_temp_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ReactorType")
                        .HasColumnName("Reactor_type")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("SectionSectionSid")
                        .IsRequired()
                        .HasColumnName("Section_Section_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("ConverterSid")
                        .HasName("Converter_PK");

                    b.HasIndex("SectionSectionSid");

                    b.ToTable("Converter");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ConverterKpi", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<string>("Analysis")
                        .HasColumnName("ANALYSIS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("ConvPeakTemp")
                        .HasColumnName("CONV_PEAK_TEMP")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempSftyMax")
                        .HasColumnName("CONV_PEAK_TEMP_SFTY_MAX")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempSftyMaxDecr")
                        .HasColumnName("CONV_PEAK_TEMP_SFTY_MAX_DECR")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempSftyMaxIncr")
                        .HasColumnName("CONV_PEAK_TEMP_SFTY_MAX_INCR")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempTrgtMax")
                        .HasColumnName("CONV_PEAK_TEMP_TRGT_MAX")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempTrgtMaxDecr")
                        .HasColumnName("CONV_PEAK_TEMP_TRGT_MAX_DECR")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempTrgtMaxIncr")
                        .HasColumnName("CONV_PEAK_TEMP_TRGT_MAX_INCR")
                        .HasColumnType("float");

                    b.Property<string>("ConvPeakTempUnit")
                        .HasColumnName("CONV_PEAK_TEMP_UNIT")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ConvPressDropAvgNrmUnit")
                        .HasColumnName("CONV_PRESS_DROP_AVG_NRM_UNIT")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("ConvPressDropFwAvgNrm")
                        .HasColumnName("CONV_PRESS_DROP_FW_AVG_NRM")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPressDropLfAvgNrm")
                        .HasColumnName("CONV_PRESS_DROP_LF_AVG_NRM")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPressDropMsd")
                        .HasColumnName("CONV_PRESS_DROP_MSD")
                        .HasColumnType("float");

                    b.Property<string>("ConvPressDropMsdUnit")
                        .HasColumnName("CONV_PRESS_DROP_MSD_UNIT")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("ConvPressDrpFwAvgNrmDecr")
                        .HasColumnName("CONV_PRESS_DRP_FW_AVG_NRM_DECR")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPressDrpFwAvgNrmIncr")
                        .HasColumnName("CONV_PRESS_DRP_FW_AVG_NRM_INCR")
                        .HasColumnType("float");

                    b.Property<string>("ConverterConverterSid")
                        .IsRequired()
                        .HasColumnName("Converter_Converter_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("KpiName")
                        .HasColumnName("KPI_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnName("VARIABLE_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Sid")
                        .HasName("Converter_KPI_PK");

                    b.HasIndex("ConverterConverterSid");

                    b.ToTable("ConverterKPI");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.Customer", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnName("Customer_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Sid")
                        .HasName("Customer_PK");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.DataMetric", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<string>("PlantSid")
                        .HasColumnName("Plant_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dor")
                        .HasColumnName("DOR")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dou")
                        .HasColumnName("DOU")
                        .HasColumnType("datetime");

                    b.Property<int>("MasterTemplateSid")
                        .HasColumnName("Master_Template_SID")
                        .HasColumnType("int");

                    b.Property<string>("RecordedUnit")
                        .HasColumnName("Recorded_Unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("StandardUnit")
                        .HasColumnName("Standard_Unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnName("Valid_From")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnName("Valid_To")
                        .HasColumnType("datetime");

                    b.Property<double?>("ValuePu")
                        .HasColumnName("Value_PU")
                        .HasColumnType("float");

                    b.Property<double?>("ValueSu")
                        .HasColumnName("Value_SU")
                        .HasColumnType("float");

                    b.Property<string>("Variable")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Sid", "PlantSid")
                        .HasName("Data_Metrics_PK");

                    b.HasIndex("MasterTemplateSid");

                    b.HasIndex("PlantSid");

                    b.ToTable("DataMetrics");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.DataTemplate", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<int>("ColumnNo")
                        .HasColumnName("Column_no")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("Create_date")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<int>("MasterTemplateSid")
                        .HasColumnName("Master_Template_SID")
                        .HasColumnType("int");

                    b.Property<string>("ProvisionalUnit")
                        .HasColumnName("Provisional_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("RangeFrom")
                        .HasColumnName("Range_From")
                        .HasColumnType("float");

                    b.Property<double?>("RangeTo")
                        .HasColumnName("Range_To")
                        .HasColumnType("float");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SubSection")
                        .HasColumnName("Sub_Section")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("TemplateCode")
                        .IsRequired()
                        .HasColumnName("Template_Code")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("TemplateType")
                        .IsRequired()
                        .HasColumnName("Template_Type")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TemplateVersion")
                        .HasColumnName("Template_Version")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int>("UomSid")
                        .HasColumnName("UOM_SID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("Update_date")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Variable")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Sid")
                        .HasName("Data_Metrics_Templates_PK");

                    b.HasIndex("MasterTemplateSid");

                    b.HasIndex("UomSid");

                    b.ToTable("DataTemplate");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ErrorDetail", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Doreading")
                        .HasColumnName("DOReading")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Doupdate")
                        .HasColumnName("DOUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorDesc")
                        .HasColumnName("Error_Desc")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("ErrorRecStatus")
                        .HasColumnName("Error_Rec_Status")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .HasColumnName("File_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("ProcessDetailsSid")
                        .HasColumnName("Process_Details_SID")
                        .HasColumnType("int");

                    b.Property<int?>("RecNumber")
                        .HasColumnName("Rec_Number")
                        .HasColumnType("int");

                    b.HasKey("Sid")
                        .HasName("Error_Details_PK");

                    b.HasIndex("ProcessDetailsSid");

                    b.ToTable("ErrorDetails");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.FittingMetric", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<double?>("Change")
                        .HasColumnType("float");

                    b.Property<double?>("ChangePct")
                        .HasColumnName("Change_PCT")
                        .HasColumnType("float");

                    b.Property<double?>("CurrentValue")
                        .HasColumnName("Current_Value")
                        .HasColumnType("float");

                    b.Property<double?>("FittedValuePu")
                        .HasColumnName("Fitted_Value_PU")
                        .HasColumnType("float");

                    b.Property<double?>("FittedValueSu")
                        .HasColumnName("Fitted_Value_SU")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FittingDate")
                        .HasColumnName("Fitting_Date")
                        .HasColumnType("date");

                    b.Property<double?>("MeasuredValueSu")
                        .HasColumnName("Measured_Value_SU")
                        .HasColumnType("float");

                    b.Property<int>("MvSid")
                        .HasColumnName("MV_SID")
                        .HasColumnType("int");

                    b.Property<double?>("OptimisedValue")
                        .HasColumnName("Optimised_Value")
                        .HasColumnType("float");

                    b.Property<string>("PlantSid")
                        .IsRequired()
                        .HasColumnName("Plant_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ProvisionalUnit")
                        .HasColumnName("Provisional_Unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReadingDate")
                        .HasColumnName("Reading_Date")
                        .HasColumnType("date");

                    b.Property<double?>("Sos")
                        .HasColumnName("SOS")
                        .HasColumnType("float");

                    b.Property<double?>("SosPct")
                        .HasColumnName("SOS_PCT")
                        .HasColumnType("float");

                    b.Property<double?>("StandardError")
                        .HasColumnName("Standard_Error")
                        .HasColumnType("float");

                    b.Property<string>("StandardUnit")
                        .HasColumnName("Standard_Unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("Step")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnName("Upload_Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnName("Valid_From")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnName("Valid_To")
                        .HasColumnType("datetime");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Sid")
                        .HasName("Fitting_Metrics_PK");

                    b.HasIndex("MvSid");

                    b.HasIndex("PlantSid");

                    b.ToTable("FittingMetrics");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.MasterTemplate", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<string>("Converter1TemplateCode")
                        .HasColumnName("Converter_1_Template_code")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Converter2TemplateCode")
                        .HasColumnName("Converter_2_Template_code")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Converter3TemplateCode")
                        .HasColumnName("Converter_3_Template_code")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Converter4TemplateCode")
                        .HasColumnName("Converter_4_Template_code")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int>("CustomerSid")
                        .HasColumnName("Customer_SID")
                        .HasColumnType("int");

                    b.Property<string>("PlantPlantSid")
                        .IsRequired()
                        .HasColumnName("Plant_Plant_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PlantTemplateCode")
                        .IsRequired()
                        .HasColumnName("Plant_Template_Code")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("SectionTemplateCode")
                        .IsRequired()
                        .HasColumnName("Section_Template_Code")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("SiteSiteId")
                        .IsRequired()
                        .HasColumnName("Site_Site_Id")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Sid")
                        .HasName("Master_Template_PK");

                    b.HasIndex("CustomerSid");

                    b.HasIndex("PlantPlantSid");

                    b.HasIndex("SiteSiteId");

                    b.ToTable("MasterTEmplate");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ModelDefinition", b =>
                {
                    b.Property<int>("ModelSid")
                        .HasColumnName("Model_SID")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnName("Model_Name")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("ModelSid")
                        .HasName("Bestfit_Model_Definition_PK");

                    b.ToTable("ModelDefinition");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ModelPlantMapping", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<int?>("DataTemplateSid")
                        .HasColumnName("Data_Template_SID")
                        .HasColumnType("int");

                    b.Property<string>("MappingType")
                        .HasColumnName("Mapping_Type")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("ModelVariableSid")
                        .HasColumnName("Model_Variable_SID")
                        .HasColumnType("int");

                    b.Property<string>("Step")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Weight")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Sid")
                        .HasName("Model_Plant_Mapping_PK");

                    b.HasIndex("DataTemplateSid");

                    b.HasIndex("ModelVariableSid");

                    b.ToTable("ModelPlantMapping");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ModelVariable", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnName("Create_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("Create_date")
                        .HasColumnType("datetime");

                    b.Property<double?>("CurrentValue")
                        .HasColumnName("Current_Value")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("MdmSid")
                        .HasColumnName("MDM_SID")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasColumnName("Model_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReadWrite")
                        .HasColumnName("Read_Write")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Section")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Step")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("Update_date")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnName("Variable_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Weight")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Sid")
                        .HasName("Model_Variables_PK");

                    b.HasIndex("MdmSid");

                    b.ToTable("ModelVariables");

                    b.HasComment("Contain BestFit model definition as the config data to enable automatic orchestration of the fitting process ");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.OptimisedMetric", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<double?>("Change")
                        .HasColumnType("float");

                    b.Property<double?>("Change1")
                        .HasColumnName("Change_%")
                        .HasColumnType("float");

                    b.Property<double?>("CurrentValue")
                        .HasColumnName("Current_Value")
                        .HasColumnType("float");

                    b.Property<double?>("FittedValuePu")
                        .HasColumnName("Fitted_Value_PU")
                        .HasColumnType("float");

                    b.Property<double?>("FittedValueSu")
                        .HasColumnName("Fitted_Value_SU")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FittingDate")
                        .HasColumnName("Fitting_Date")
                        .HasColumnType("date");

                    b.Property<double?>("MeasuredValueSu")
                        .HasColumnName("Measured_Value_SU")
                        .HasColumnType("float");

                    b.Property<int>("ModelSid")
                        .HasColumnName("Model_SID")
                        .HasColumnType("int");

                    b.Property<int>("ModelVariableSid")
                        .HasColumnName("Model_Variable_SID")
                        .HasColumnType("int");

                    b.Property<double?>("OptimisedValue")
                        .HasColumnName("Optimised_Value")
                        .HasColumnType("float");

                    b.Property<int>("PlantSid")
                        .HasColumnName("Plant_SID")
                        .HasColumnType("int");

                    b.Property<string>("ProvisionalUnit")
                        .HasColumnName("Provisional_Unit")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReadingDate")
                        .HasColumnName("Reading_Date")
                        .HasColumnType("date");

                    b.Property<double?>("Sos")
                        .HasColumnName("SOS")
                        .HasColumnType("float");

                    b.Property<double?>("Sos1")
                        .HasColumnName("SOS_%")
                        .HasColumnType("float");

                    b.Property<double?>("StandardError")
                        .HasColumnName("Standard_Error")
                        .HasColumnType("float");

                    b.Property<string>("StandardUnit")
                        .HasColumnName("Standard_Unit")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<double?>("Step")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnName("Upload_Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnName("Valid_From")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnName("Valid_To")
                        .HasColumnType("datetime");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Sid")
                        .HasName("Optimised_Metric_PK");

                    b.ToTable("OptimisedMetric");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.Plant", b =>
                {
                    b.Property<string>("PlantSid")
                        .HasColumnName("Plant_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfEstablish")
                        .HasColumnName("Date_of_establish")
                        .HasColumnType("datetime");

                    b.Property<double?>("MaxProdFlow")
                        .HasColumnName("Max_Prod_flow")
                        .HasColumnType("float");

                    b.Property<string>("MaxProdFlowUnit")
                        .HasColumnName("Max_Prod_flow_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("MaxSyngFlowUnit")
                        .HasColumnName("Max_Syng_flow_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("MaxSyngasFlow")
                        .HasColumnName("Max_Syngas_flow")
                        .HasColumnType("float");

                    b.Property<double?>("PlantCapacity")
                        .HasColumnName("Plant_Capacity")
                        .HasColumnType("float");

                    b.Property<string>("PlantCapacityUnit")
                        .HasColumnName("Plant_capacity_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("PlantMolecularWt")
                        .HasColumnName("Plant_Molecular_wt")
                        .HasColumnType("float");

                    b.Property<string>("PlantName")
                        .HasColumnName("Plant_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PlantStatus")
                        .HasColumnName("Plant_Status")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<double?>("RRatioTarget")
                        .HasColumnName("R_Ratio_Target")
                        .HasColumnType("float");

                    b.Property<string>("SiteSiteId")
                        .IsRequired()
                        .HasColumnName("Site_Site_Id")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("PlantSid")
                        .HasName("Plant_PK");

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.PlantKpi", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<double?>("ConvPeakTemp")
                        .HasColumnName("CONV_PEAK_TEMP")
                        .HasColumnType("float");

                    b.Property<string>("ConvPeakTempAnalysis")
                        .HasColumnName("CONV_PEAK_TEMP_ANALYSIS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("ConvPeakTempSftyMax")
                        .HasColumnName("CONV_PEAK_TEMP_SFTY_MAX")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempSftyMaxDecr")
                        .HasColumnName("CONV_PEAK_TEMP_SFTY_MAX_DECR")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempSftyMaxIncr")
                        .HasColumnName("CONV_PEAK_TEMP_SFTY_MAX_INCR")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempTrgtMax")
                        .HasColumnName("CONV_PEAK_TEMP_TRGT_MAX")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempTrgtMaxDecr")
                        .HasColumnName("CONV_PEAK_TEMP_TRGT_MAX_DECR")
                        .HasColumnType("float");

                    b.Property<double?>("ConvPeakTempTrgtMaxIncr")
                        .HasColumnName("CONV_PEAK_TEMP_TRGT_MAX_INCR")
                        .HasColumnType("float");

                    b.Property<string>("ConvPeakTempUnit")
                        .HasColumnName("CONV_PEAK_TEMP_UNIT")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ConverterConverterSid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Converter_Converter_SID")
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("KpiName")
                        .HasColumnName("KPI_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("SyngasFlowActValue")
                        .HasColumnName("SYNGAS_FLOW_ACT_VALUE")
                        .HasColumnType("float");

                    b.Property<string>("SyngasFlowActValueUnit")
                        .HasColumnName("SYNGAS_FLOW_ACT_VALUE_UNIT")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("SyngasFlowPercent")
                        .HasColumnName("SYNGAS_FLOW_PERCENT")
                        .HasColumnType("float");

                    b.Property<string>("SyngasFlowPercentUnit")
                        .HasColumnName("SYNGAS_FLOW_PERCENT_UNIT")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<double?>("SyngasFlowTotal")
                        .HasColumnName("SYNGAS_FLOW_TOTAL")
                        .HasColumnType("float");

                    b.Property<string>("SyngasFlowTotalUnit")
                        .HasColumnName("SYNGAS_FLOW_TOTAL_UNIT")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnName("VARIABLE_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Sid")
                        .HasName("Plant_KPI_PK");

                    b.HasIndex("ConverterConverterSid");

                    b.ToTable("PlantKPI");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.PlantProvisionalUnit", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<string>("PlantPlantSid")
                        .IsRequired()
                        .HasColumnName("Plant_Plant_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ProvisionalUnitName")
                        .HasColumnName("Provisional_Unit_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ProvisionalUnitSymbol")
                        .HasColumnName("Provisional_Unit_symbol")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("UomUnitSid")
                        .HasColumnName("UOM_UNIT_SID")
                        .HasColumnType("int");

                    b.HasKey("Sid")
                        .HasName("Plant_Provisonal_Units_PK");

                    b.HasIndex("PlantPlantSid");

                    b.HasIndex("UomUnitSid");

                    b.ToTable("PlantProvisionalUnits");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ProcessDetail", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<string>("AvScanStatus")
                        .HasColumnName("AV_Scan_Status")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("HistoryRevFlag")
                        .HasColumnName("History_Rev_Flag")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("PlantPlantSid")
                        .IsRequired()
                        .HasColumnName("Plant_Plant_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PreChkStatus")
                        .HasColumnName("Pre_Chk_Status")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnName("Process_Date")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessStatus")
                        .HasColumnName("Process_Status")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReadingDate")
                        .HasColumnName("Reading_Date")
                        .HasColumnType("date");

                    b.Property<string>("SiteId")
                        .HasColumnName("Site_Id")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Summary")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnName("Upload_Date")
                        .HasColumnType("datetime");

                    b.Property<string>("UploadFileName")
                        .HasColumnName("Upload_File_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UploadFileStatus")
                        .HasColumnName("Upload_File_Status")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Sid")
                        .HasName("Process_Details_PK");

                    b.HasIndex("PlantPlantSid");

                    b.ToTable("ProcessDetails");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.Section", b =>
                {
                    b.Property<string>("SectionSid")
                        .HasColumnName("Section_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PlantPlantSid")
                        .IsRequired()
                        .HasColumnName("Plant_Plant_SID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SectionName")
                        .HasColumnName("Section_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("SectionSid")
                        .HasName("Section_PK");

                    b.HasIndex("PlantPlantSid");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.SectionKpi", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("int");

                    b.Property<string>("Analysis")
                        .HasColumnName("ANALYSIS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ConverterConverterSid")
                        .IsRequired()
                        .HasColumnName("Converter_Converter_SID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("KpiName")
                        .HasColumnName("KPI_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("MethanolProdActual")
                        .HasColumnName("Methanol_Prod_actual")
                        .HasColumnType("float");

                    b.Property<double?>("MethanolProdActualPerc")
                        .HasColumnName("Methanol_Prod_actual_perc")
                        .HasColumnType("float");

                    b.Property<string>("MethanolProdActualUnit")
                        .HasColumnName("Methanol_Prod_actual_unit")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("MethanolProdTotalProd")
                        .HasColumnName("Methanol_Prod_Total_prod")
                        .HasColumnType("float");

                    b.Property<string>("VariableName")
                        .HasColumnName("VARIABLE_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Sid")
                        .HasName("SectionKPI_PK");

                    b.ToTable("SectionKPI");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.Site", b =>
                {
                    b.Property<string>("SiteId")
                        .HasColumnName("Site_Id")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CompanyName")
                        .HasColumnName("Company_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("CustomerSid")
                        .HasColumnName("Customer_SID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfEstablish")
                        .HasColumnName("Date_of_establish")
                        .HasColumnType("date");

                    b.Property<string>("SiteLocationCountry")
                        .HasColumnName("Site_location_country")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("SiteLocationState")
                        .HasColumnName("Site_location_state")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("SiteName")
                        .HasColumnName("Site_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SiteSubsrTier")
                        .HasColumnName("Site_Subsr_tier")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("SiteId");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.UnitsofMeasurement", b =>
                {
                    b.Property<int>("UnitSid")
                        .HasColumnName("UNIT_SID")
                        .HasColumnType("int");

                    b.Property<string>("UnitFamily")
                        .HasColumnName("Unit_Family")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UnitName")
                        .HasColumnName("Unit_Name")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UnitSymbol")
                        .HasColumnName("Unit_Symbol")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("UnitSid")
                        .HasName("Units_of_Measurement_PK");

                    b.ToTable("UnitsofMeasurement");
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.Converter", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.Section", "SectionSectionS")
                        .WithMany("Converters")
                        .HasForeignKey("SectionSectionSid")
                        .HasConstraintName("Converter_Section_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ConverterKpi", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.Converter", "ConverterConverterS")
                        .WithMany("ConverterKpis")
                        .HasForeignKey("ConverterConverterSid")
                        .HasConstraintName("Converter_KPI_Convertor_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.DataMetric", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.MasterTemplate", "MasterTemplateS")
                        .WithMany("DataMetrics")
                        .HasForeignKey("MasterTemplateSid")
                        .HasConstraintName("Data_Metrics_Master_Template_FK")
                        .IsRequired();

                    b.HasOne("JM.Integration.Methanol.DB.Models.Plant", "PlantS")
                        .WithMany("DataMetrics")
                        .HasForeignKey("PlantSid")
                        .HasConstraintName("Data_Metrics_Plant_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.DataTemplate", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.MasterTemplate", "MasterTemplateS")
                        .WithMany("DataTemplates")
                        .HasForeignKey("MasterTemplateSid")
                        .HasConstraintName("Data_Template_Master_Template_FK")
                        .IsRequired();

                    b.HasOne("JM.Integration.Methanol.DB.Models.UnitsofMeasurement", "UomS")
                        .WithMany("DataTemplates")
                        .HasForeignKey("UomSid")
                        .HasConstraintName("Data_Template_Units_of_Measurement_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ErrorDetail", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.ProcessDetail", "ProcessDetailsS")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("ProcessDetailsSid")
                        .HasConstraintName("Error_Details_Process_Details_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.FittingMetric", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.ModelVariable", "MvS")
                        .WithMany("FittingMetrics")
                        .HasForeignKey("MvSid")
                        .HasConstraintName("Fitting_Metrics_Model_Variables_FK")
                        .IsRequired();

                    b.HasOne("JM.Integration.Methanol.DB.Models.Plant", "PlantS")
                        .WithMany("FittingMetrics")
                        .HasForeignKey("PlantSid")
                        .HasConstraintName("Fitting_Metrics_Plant_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.MasterTemplate", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.Customer", "CustomerS")
                        .WithMany("MasterTemplates")
                        .HasForeignKey("CustomerSid")
                        .HasConstraintName("Master_Template_Customer_FK")
                        .IsRequired();

                    b.HasOne("JM.Integration.Methanol.DB.Models.Plant", "PlantPlantS")
                        .WithMany("MasterTemplates")
                        .HasForeignKey("PlantPlantSid")
                        .HasConstraintName("MasterTemplate_Plant_FK")
                        .IsRequired();

                    b.HasOne("JM.Integration.Methanol.DB.Models.Site", "SiteSite")
                        .WithMany("MasterTemplates")
                        .HasForeignKey("SiteSiteId")
                        .HasConstraintName("Master_Template_Site_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ModelPlantMapping", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.DataTemplate", "DataTemplateS")
                        .WithMany("ModelPlantMappings")
                        .HasForeignKey("DataTemplateSid")
                        .HasConstraintName("Model_Plant_Mapping_Data_Template_FK");

                    b.HasOne("JM.Integration.Methanol.DB.Models.ModelVariable", "ModelVariableS")
                        .WithMany("ModelPlantMappings")
                        .HasForeignKey("ModelVariableSid")
                        .HasConstraintName("Model_Plant_Mapping_Model_Variables_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ModelVariable", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.ModelDefinition", "MdmS")
                        .WithMany("ModelVariables")
                        .HasForeignKey("MdmSid")
                        .HasConstraintName("Model_Variables_Model_Definition_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.PlantKpi", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.Converter", "ConverterConverterS")
                        .WithMany("PlantKpis")
                        .HasForeignKey("ConverterConverterSid")
                        .HasConstraintName("PlantKPI_Convertor_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.PlantProvisionalUnit", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.Plant", "PlantPlantS")
                        .WithMany("PlantProvisionalUnits")
                        .HasForeignKey("PlantPlantSid")
                        .HasConstraintName("Plant_Provisonal_Units_Plant_FK")
                        .IsRequired();

                    b.HasOne("JM.Integration.Methanol.DB.Models.UnitsofMeasurement", "UomUnitS")
                        .WithMany("PlantProvisionalUnits")
                        .HasForeignKey("UomUnitSid")
                        .HasConstraintName("Plant_Provisonal_Units_Units_of_Measurement_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.ProcessDetail", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.Plant", "PlantPlantS")
                        .WithMany("ProcessDetails")
                        .HasForeignKey("PlantPlantSid")
                        .HasConstraintName("Process_Details_Plant_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("JM.Integration.Methanol.DB.Models.Section", b =>
                {
                    b.HasOne("JM.Integration.Methanol.DB.Models.Plant", "PlantPlantS")
                        .WithMany("Sections")
                        .HasForeignKey("PlantPlantSid")
                        .HasConstraintName("Section_Plant_FK")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
